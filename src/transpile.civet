"civet coffeeInterpolation"
type { Message, MessageCreateOptions, RawFile } from discord.js
type { ClientWithCache } from ./index.civet
* as prettier from prettier
{ compile, isCompileError, type ParseErrors } from @danielx/civet
{ version } from ../node_modules/@danielx/civet/package.json

export interface Transpiled
  about: string
  code: string
  error?: string

export transpileResponse := async (message: Message): Promise<MessageCreateOptions | undefined> ->
  return unless message.content
  inputs := [...message.content.matchAll /```(?<lang>civet|coffee)-?(?<raw>raw)?-?(?<js>js)?.*?\n(?<code>(?:.|\n)*?)\n```/mg]
  return unless inputs#

  transpileds := for input of inputs
    {code, raw, js, lang} := input.groups!
    prettier := !raw
    coffee := lang is 'coffee'
    compileCode code, prettier, !!js, coffee |> await

  reply: MessageCreateOptions :=
    content: '' // added to below
    reply:
      messageReference: message
      failIfNotExists: false
    allowedMentions:
      repliedUser: false

  if transpileds.map(&.about# + &.code#).reduce((+)) > 1500
    reply.files = for each transpiled, i of transpileds[0...10]
      attachment: createSnippet transpiled, false
      name: `result${i}.tsx`
  else
    for transpiled of transpileds
      reply.content += createSnippet(transpiled) + '\n'
    reply.content = reply.content![...-1] // remove final \n

  reply

export createSnippet := (transpiled: Transpiled, md: boolean = true, language = 'tsx') =>
  { about, error, code } .= transpiled
  preamble .= about
  preamble += ` — *${error}*` if error
  preamble += '\n' if preamble
  md ? """
  #{preamble}```#{language}
  #{code or '// no output'}
  ```
  """ : """
  #{preamble}#{code}
  """

export compileCode := (civetCode: string, usePrettier: boolean, js: boolean, coffee?: boolean): Promise<Transpiled> ->
  code .= ''
  civetCode = '"civet coffeeCompat"\n' + civetCode if coffee

  about .= version
  about += ' Coffee' if coffee
  about += ' raw' unless usePrettier
  about += ' JS' if js
  about = `↓↓↓ **${about}**`

  try
    code = await compile civetCode,
      js: js
      comptime: false  // disable comptime for security
  catch error
    if isCompileError error // ParseError or ParseErrors
      // Unwrap ParseErrors to first error
      if (error as ParseErrors).errors?
        error = (error as ParseErrors).errors[0]
      code = """
        #{civetCode.split('\n')[0...error.line].join '\n'}
        #{' '.repeat error.column - 1}^ #{error.header}
      """
      return {about, code, error: "Transpilation failed!"}
    else // unknown Error
      return {
        about
        code: `${(error as Error).name}: ${(error as Error).message}`
        error: "Transpilation failed!"
      }
  
  if usePrettier
    try
      code = await prettier.format code, parser: 'typescript'
    catch
      return { about, code, error: 'Prettier failed! Fallback to raw output.' }

  { about, code }
