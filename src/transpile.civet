type { Message, MessageCreateOptions, RawFile } from discord.js
type { ClientWithCache } from ./index.civet
* as prettier from prettier
{ compile, isCompileError, type ParseErrors } from @danielx/civet
{ version } from ../node_modules/@danielx/civet/package.json

export interface Transpiled
  code: string
  error?: string

export transpileResponse := async (message: Message): Promise<MessageCreateOptions | undefined> ->
  return unless message.content
  codes := [...message.content.matchAll /```(?<lang>civet|coffee)-?(?<raw>raw)?-?(?<js>js)?.*?\n(?<code>(?:.|\n)*?)\n```/mg]
  return unless codes.length

  transpiledCodes := for code of codes
    compileCode code.groups!.code, !code.groups!.raw, !!code.groups!.js, code.groups!.lang == 'coffee' |> await

  reply: MessageCreateOptions :=
    content: `↓↓↓ **${version}**`,
    reply:
      messageReference: message
      failIfNotExists: false
    allowedMentions:
      repliedUser: false

  if transpiledCodes.reduce (acc, val) => acc + val.code.length + 8, 0 |> & + `↓↓↓ **${version}**`.length > 1500
    reply.files = for each code, i of transpiledCodes[0...10]
      attachment: createSnippet(code, false)
      name: `result${i}.ts`
  else
    reply.content += transpiledCodes.map ($) => createSnippet $
      .join '\n'

  reply

export createSnippet := (transpiled: Transpiled, md: boolean = true, language = 'tsx') =>
  { error, code } .= transpiled
  if error
    error = ` — *${error}*\n`
  else
    error = ''
  md ? """
  #{error}```#{language}
  #{code or '// no output'}
  ```
  """ : """
  #{error}#{code}
  """

export compileCode := (civetCode: string, usePrettier: boolean, js: boolean, coffee?: boolean): Promise<Transpiled> ->
  code .= ''
  civetCode = '"civet coffeeCompat"\n' + civetCode if coffee

  try
    code = await compile civetCode,
      js: js
      comptime: false  // disable comptime for security
  catch error
    if isCompileError error // ParseError or ParseErrors
      // Unwrap ParseErrors to first error
      if (error as ParseErrors).errors?
        error = (error as ParseErrors).errors[0]
      code = """
        #{civetCode.split('\n')[0...error.line].join '\n'}
        #{' '.repeat error.column - 1}^ #{error.header}
      """
      return {code, error: "Transpilation failed!"}
    else // unknown Error
      return
        code: `${(error as Error).name}: ${(error as Error).message}`
        error: "Transpilation failed!"
  
  if usePrettier
    try
      code = await prettier.format code, parser: 'typescript'
    catch
      return { code, error: 'Prettier failed! Fallback to raw output.' }

  { code }
