{ Client, Events, GatewayIntentBits, Message } from discord.js
{ config } from dotenv
{ onMessage } from ./onMessage.civet
{ onMessageUpdate } from ./onMessageUpdate.civet
{ onMessageDelete } from ./onMessageDelete.civet
{ onMessageDeleteBulk } from ./onMessageDeleteBulk.civet
{ onInteractionCreate } from ./onInteractionCreate.civet
compileCommand from ./commands/compile.civet

config()

export interface ClientWithCache extends Client
  messagesCache: Map<string, Message>

client := new Client
  intents: [
    GatewayIntentBits.Guilds
    GatewayIntentBits.GuildMessages
    GatewayIntentBits.MessageContent
  ]

client.on Events.MessageCreate, onMessage
client.on Events.MessageUpdate, onMessageUpdate
client.on Events.MessageDelete, onMessageDelete
client.on Events.MessageBulkDelete, onMessageDeleteBulk
client.on Events.InteractionCreate, onInteractionCreate

(client as ClientWithCache).messagesCache = new Map

client.once Events.ClientReady, (c) =>
  console.log `Ready! Logged in as ${c.user.tag}`
  publishCommands().then => console.log "Published commands"

publishCommands := ->
  client.application!.commands.set [compileCommand.data]

if token := process.env['DISCORD_TOKEN']
  client.login token
else
  console.log 'Set DISCORD_TOKEN environment variable to bot token.'
  process.exit 1
